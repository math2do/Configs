# -*- mode: snippet -*- 
# name: prims_mst 
# key: prims_mst	
# --

template <typename T>
vector <int> mst(const undigraph<T> &g, T &ans) {
  priority_queue<pair<T, int>, vector<pair<T, int> >, greater<pair<T, int> > > pq;
  vector<T> dist(g.n, numeric_limits<T>::max());
  vector <bool> seen(g.n, false);
  vector <int> ans_list(g.n - 1);
  
  int start = 0;
  dist[start] = 0;
  pq.emplace(dist[start], start);
  while (!pq.empty()) {
    pair <T, int> pr = pq.top(); 
    pq.pop();
    int u = pr.second;
    seen[u] = true;
    for (int id : g.g[u]) {
      auto &e = g.edges[id];
      int v = e.from ^ e.to ^ u;
      if (!seen[v] && e.cost < dist[v]) {
        dist[v] = e.cost;
        ans_list[v - 1] = id;
        pq.emplace(dist[v], v);
      } 
    }
  }

  ans = 0;
  for (int i = 0; i < g.n; i++) {
    ans += dist[i];
  } 
  return ans_list;
  //returns edge ids of minimum "spanning" forest
}
