# -*- mode: snippet -*- 
# name: dijkstra_pq 
# key: dijkstra_pq	
# --

//verified against interviewbit knight problem and AOJ GRL_1_A
struct Edge {
  int dst;
  int wgt;
  Edge(int idst, int iwgt) : dst(idst), wgt(iwgt) {};
};

class Graph {
private:
  int V;
  int E;
  vector <vector <Edge>> adj;
public:
  Graph(int n, int m);
  void addEdge(int src, int dst, int wgt);
  void dijkstra(int src);
};

Graph::Graph(int n, int m) {
  this->V = n;
  this->E = m;
  adj.resize(n);
}

void Graph::addEdge(int src, int dst, int wgt) {
  adj[src].push_back(Edge(dst, wgt));
}

void Graph::dijkstra(int src) {
  vector <int> dist(V, pinf);
  priority_queue <pair <int, int>, vector <pair <int, int>>, greater<pair <int, int>>> pq;
  dist[src] = 0;
  pq.emplace(0, src);
  while (!pq.empty()) {
    pair <int, int> pr = pq.top(); pq.pop();
    int u = pr.second;
    for (Edge &edge : adj[u]) {
      int v = edge.dst;
      int w = edge.wgt;
      if (dist[u] + w < dist[v]) {
        dist[v] = dist[u] + w;
        pq.emplace(dist[v], v);
      } 
    } 
  } 

  for (int i = 0; i < V; i++) {
    if (dist[i] == pinf) cout << "INF" << endl;
    else cout << dist[i] << endl;
  } 
} 

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int n, m, src;
  cin >> n >> m >> src;
  Graph g(n, m);
  int s, t, w;
  for (int i = 0; i < m; i++) {
    cin >> s >> t >> w;
    g.addEdge(s, t, w);
  }
  g.dijkstra(src);
  return 0;
}
