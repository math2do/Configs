# -*- mode: snippet -*- 
# name: matching 
# key: matching	
# --

/**
1) Initialize Maximal Matching M as empty.
2) While there exists an Augmenting Path p
     Remove matching edges of p from M and add not-matching edges of p to M
     (This increases size of M by 1 as p starts and ends with a free vertex)
3) Return M. 
verified agaist AOJ GRL_7_A
*/
/*
class Graph {
private:
  int L;
  int R;
  vector <vector <int>> adj;
  vector <int> level;
  vector <int> mate;
  bool levelize();
  bool dfs(int u);

public:
  Graph(int L, int R);    
  void addEdge(int u, int v);
  int matching(); 
};

Graph::Graph(int L, int R) {
  this->L = L;
  this->R = R;
  adj.resize(L + R);
  level.resize(L);
  mate.resize(L + R);
}


void Graph::addEdge(int u, int v) {
  adj[u].push_back(v + L);
  adj[v + L].push_back(u);
}

bool Graph::levelize() {
  queue <int> q;
  for (int u = 0; u < L; u++) {
    level[u] = -1;
    if (mate[u] == -1) {
      level[u] = 0;
      q.push(u);
    }
  }
         
  while (!q.empty()) {
    int u = q.front();
    q.pop();

    for (int w : adj[u]) {
      int v = mate[w];
      if (v == -1) {
        return true;
      }

      if (level[v] == -1) {
        level[v] = level[u] + 1;
        q.push(v);
      } 
    }
  }
  return false;
}

bool Graph::dfs(int u) {
  for (int w : adj[u]) {
    int v = mate[w];
    if (v == -1 || (level[v] == level[u] + 1 && dfs(v))) {
      mate[u] = w;
      mate[w] = u;
      return true;
    }
  }

  return false;
}

int Graph::matching() {
  int match = 0;
  fill(mate.begin(), mate.end(), -1);

  while (levelize()) {
    for (int u = 0; u < L; u++) {
      if (mate[u] == -1 && dfs(u)) {
        match++;
      }
    }
  }
  return match; 
} 

int main() {
  int L, R, E;
  cin >> L >> R >> E;
  int u, v; 
  Graph g(L, R);
  for (int i = 0; i < E; i++) {
    cin >> u >> v;
    g.addEdge(u, v);
  }
  cout << g.matching() << '\n';
  return 0;
} 
*/

//Hoftcoft-Karp Mathing Algorithm
class matching {
 public:
  vector<vector<int>> g;
  vector<int> pa;
  vector<int> pb;
  vector<int> was;
  int n, m;
  int res;
  int iter;
 
  matching(int _n, int _m) : n(_n), m(_m) {
    assert(0 <= n && 0 <= m);
    pa = vector<int>(n, -1);
    pb = vector<int>(m, -1);
    was = vector<int>(n, 0);
    g.resize(n);
    res = 0;
    iter = 0;
  }
 
  void add(int from, int to) {
    assert(0 <= from && from < n && 0 <= to && to < m);
    g[from].push_back(to);
  }
 
  bool dfs(int v) {
    was[v] = iter;
    for (int u : g[v]) {
      if (pb[u] == -1) {
        pa[v] = u;
        pb[u] = v;
        return true;
      }
    }
    for (int u : g[v]) {
      if (was[pb[u]] != iter && dfs(pb[u])) {
        pa[v] = u;
        pb[u] = v;
        return true;
      }
    }
    return false;
  }
 
  int solve() {
    while (true) {
      iter++;
      int add = 0;
      for (int i = 0; i < n; i++) {
        if (pa[i] == -1 && dfs(i)) {
          add++;
        }
      }
      if (add == 0) {
        break;
      }
      res += add;
    }
    return res;
  }
 
  int run_one(int v) {
    if (pa[v] != -1) {
      return 0;
    }
    iter++;
    return (int) dfs(v);
  }
};