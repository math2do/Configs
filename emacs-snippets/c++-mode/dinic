# -*- mode: snippet -*- 
# name: dinic 
# key: dinic	
# --

//verifed against AOJ GRL_6_A 
const int maxnodes = 101;

vector <int> start(maxnodes);

struct Edge {
  int to, rev;
  int flow, cap;
};

class Graph {
private:
  int V;
  vector <int> level;
  vector <vector <Edge>> adj;
  bool dinic_bfs(int s, int t);
  int dinic_dfs(int s, int t, int flow);
public:
  Graph(int n);
  void addEdge(int src, int dst, int cap);
  int maxFlow(int s, int t);
};

Graph::Graph(int n) {
  adj.resize(n);
  level.resize(n);
  this->V = n;
}

void Graph::addEdge(int src, int dst, int cap) {
  Edge a = {dst, (int) adj[dst].size(), 0, cap};
  Edge b = {src, (int) adj[src].size(), 0, 0};
  adj[src].push_back(a);
  adj[dst].push_back(b);  
}

bool Graph::dinic_bfs(int s, int t) {
  fill(level.begin(), level.end(), -1);
  level[s] = 0;
  queue <int> q;
  q.push(s);

  while (!q.empty()) {
    int u = q.front();
    q.pop();
    for (int j = 0; j < (int) adj[u].size(); j++) {
      Edge &e = adj[u][j];
      int v = e.to;
      if (level[v] < 0 && e.flow < e.cap) {
        level[v] = level[u] + 1;
        q.push(v);
      }
    }
  }
  return level[t] >= 0;
}

int Graph::dinic_dfs(int u, int t, int flow) {
  if (u == t) {
    return flow;
  }
  for (; start[u] < (int) adj[u].size(); start[u]++) {
    Edge &e = adj[u][start[u]]; 
    int v = e.to;
    if (level[v] == level[u] + 1 && e.flow < e.cap) {
      int flow_ahead = dinic_dfs(v, t, min(flow, e.cap - e.flow));
      if (flow_ahead > 0) {
        e.flow += flow_ahead;
        adj[v][e.rev].flow -= flow_ahead;
        return flow_ahead;
      }
    }
  }
  return 0;
}

int Graph::maxFlow(int s, int t) {
  int result = 0;
  while (dinic_bfs(s, t)) {
    fill(start.begin(), start.begin() + V, 0);
    while (int delta = dinic_dfs(s, t, INT_MAX)) {
      result += delta;
    }
  }
  return result;
}

int main() {
  int n, m;
  cin >> n >> m;
  Graph g(n);
  int s, d, c;
  for (int i = 0; i < m; i++) {
    cin >> s >> d >> c;
    g.addEdge(s, d, c);
  }
  cout << g.maxFlow(0, n - 1) << endl;
}


// Tourist's
template <typename T>
class dinic {
 public:
  flow_graph<T> &g;

  vector<int> ptr;
  vector<int> d;
  vector<int> q;

  dinic(flow_graph<T> &_g) : g(_g) {
    ptr.resize(g.n);
    d.resize(g.n);
    q.resize(g.n);
  }

  bool expath() {
    fill(d.begin(), d.end(), -1);
    q[0] = g.fin;
    d[g.fin] = 0;
    int beg = 0, end = 1;
    while (beg < end) {
      int i = q[beg++];
      for (int id : g.g[i]) {
        const auto &e = g.edges[id];
        const auto &back = g.edges[id ^ 1];
        if (back.c - back.f > g.eps && d[e.to] == -1) {
          d[e.to] = d[i] + 1;
          if (e.to == g.st) {
            return true;
          }
          q[end++] = e.to;
        }
      }
    }
    return false;
  }
   
  T dfs(int v, T w) {
    if (v == g.fin) {
      return w;
    }
    int &j = ptr[v];
    while (j >= 0) {
      int id = g.g[v][j];
      const auto &e = g.edges[id];
      if (e.c - e.f > g.eps && d[e.to] == d[v] - 1) {
        T t = dfs(e.to, min(e.c - e.f, w));
        if (t > g.eps) {
          g.edges[id].f += t;
          g.edges[id ^ 1].f -= t;
          return t;
        }
      }
      j--;
    }
    return 0;
  }

  T max_flow() {
    while (expath()) {
      for (int i = 0; i < g.n; i++) {
        ptr[i] = (int) g.g[i].size() - 1;
      }
      T big_add = 0;
      while (true) {
        T add = dfs(g.st, numeric_limits<T>::max());
        if (add <= g.eps) {
          break;
        }
        big_add += add;
      }
      if (big_add <= g.eps) {
        break;
      }
      g.flow += big_add;
    }
    return g.flow;
  }

  vector<bool> min_cut() {
    max_flow();
    vector<bool> ret(g.n);
    for (int i = 0; i < g.n; i++) {
      ret[i] = (d[i] != -1);
    }
    return ret;
  }
};
