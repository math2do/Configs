# -*- mode: snippet -*- 
# name: ncr 
# key: ncr	
# --

//..ncr table for variable n and r
const int N = ...;
int C[N + 1][N + 1];
int calc_C() {
  C[0][0] = 1;
  for (int n = 1; n <= N; n++) {
    C[n][0] = C[n][n] = 1;
    for (int k = 1; k < n; k++) {
      C[n][k] = C[n - 1][k - 1] + C[n - 1][k];
    }
  }
}

//..ncr table for fixed n and variable r
const int N = ...;
int C[N + 1];
void calc_C(int n = N) {
  memset(C, 0, sizeof(C));
  C[0] = 1; 
  for (int i = 1; i <= n; i++) {
    for (int j = i; j > 0; j--) {
      C[j] = C[j] + C[j - 1];
    }
  }
} 


//..ncr value for specific n and specific r
inline int C(int n, int r) {
  if (r < 0 || r > n) {
    return 0;
  }
  r = min(r, n - r);
  int res = 1;
  for (int i = 0; i < r; i++) {
    res *= (n - i);
    res /= (i + 1);
  }
  return res;
}

//..under mod using ncr = n! / ((n - r) ! * r!)
template< typename T >
class combination {
 public:
  vector <T> fact;
  vector <T> ifact;
  combination(int N) : fact(N + 1), ifact(N + 1) {
    fact[0] = 1;
    for (int i = 1; i <= N; i++) {
      fact[i] = fact[i - 1] * i;
    }
    ifact[N] = 1 / fact[N];
    for (int i = N - 1; i >= 0; i--) {
      ifact[i] = ifact[i + 1] * (i + 1);
    }
  } 
  T P(int n, int r) const {
    if (r < 0 || n < r) return 0;
    return fact[n] * ifact[n - r];
  }
 
  T C(int n, int r) const {
    if (r < 0 || n < r) return 0;
    return fact[n] * ifact[r] * ifact[n - r];
  }
 
  T H(int n, int r) const {
    if (n < 0 || r < 0) return 0;
    return r == 0 ? 1 : C(n + r - 1, r);
  }
};