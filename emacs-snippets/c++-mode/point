# -*- mode: snippet -*- 
# name: point 
# key: point	
# --

struct point {
  int x;
  int y;
  point() : x(0), y(0) { }
  point(int _x, int _y) : x(_x), y(_y) { }
  bool operator < (const point &b) const {
    return x < b.x || (x == b.x && y < b.y);
  } 
};

string to_string(const point& p) {
  return "{" + to_string(p.x) + ", " + to_string(p.y) + "}";
}

ostream& operator<<(ostream& out, const point& p) {
  out << to_string(p);
  return out;
}
 
istream& operator>>(istream& in, point& p) {
  in >> p.x >> p.y;
  return in;
}

inline int dot(point& a, point& b) {
  return a.x * b.x + a.y * b.y;
}

inline int cross(point& a, point& b) {
  return a.x * b.y - a.y * b.x;
}

inline int norm(point& a) {
  return dot(a, a);
}

inline double abs(point& a) {
  return sqrt(norm(a));
}

inline double proj(point& a, point& b) {
  return dot(a, b) / abs(b);
}

inline double angle(point& a, point& b) {
  return acos(dot(a, b) / abs(a) / abs(b));
}


template <typename T>
struct TPoint {
  T x;
  T y;
  int id;

  TPoint() : x(0), y(0), id(-1) {}
  TPoint(const T& x_, const T& y_) : x(x_), y(y_), id(-1) {}
  TPoint(const T& x_, const T& y_, int id_) : x(x_), y(y_), id(id_) {}

  static constexpr T eps = static_cast<T>(1e-9);

  inline TPoint operator+(const TPoint& rhs) const { return TPoint(x + rhs.x, y + rhs.y); }
  inline TPoint operator-(const TPoint& rhs) const { return TPoint(x - rhs.x, y - rhs.y); }
  inline TPoint operator*(const T& rhs) const { return TPoint(x * rhs, y * rhs); }
  inline TPoint operator/(const T& rhs) const { return TPoint(x / rhs, y / rhs); }

  friend T smul(const TPoint& a, const TPoint& b) {
    return a.x * b.x + a.y * b.y;
  }

  friend T vmul(const TPoint& a, const TPoint& b) {
    return a.x * b.y - a.y * b.x;
  }

  inline T abs2() const {
    return x * x + y * y;
  }

  inline bool operator<(const TPoint& rhs) const {
    return (y < rhs.y || (y == rhs.y && x < rhs.x));
  }

  inline bool is_upper() const {
    return (y > eps || (abs(y) <= eps && x > eps));
  }

  inline int cmp_polar(const TPoint& rhs) const {
    assert(abs(x) > eps || abs(y) > eps);
    assert(abs(rhs.x) > eps || abs(rhs.y) > eps);
    bool a = is_upper();
    bool b = rhs.is_upper();
    if (a != b) {
      return (a ? -1 : 1);
    }
    long long v = x * rhs.y - y * rhs.x;
    return (v > eps ? -1 : (v < -eps ? 1 : 0));
  }
};

using Point = TPoint<long long>;
//using Point = TPoint<long double>;

template <typename T>
string to_string(const TPoint<T>& p) {
  return "(" + to_string(p.x) + ", " + to_string(p.y) + ")";
}
