# -*- mode: snippet -*- 
# name: lcp 
# key: lcp	
# --

/* tourist's template
template <typename T>
vector<int> build_lcp(int n, const T &s, const vector<int> &sa) {
  assert((int) sa.size() == n);
  vector<int> rank(n);
  for (int i = 0; i < n; i++) {
      rank[sa[i]] = i;
  }
  vector<int> lcp(max(n - 1, 0));
  int k = 0;
  for (int i = 0; i < n; i++) {
    k = max(k - 1, 0);
    if (rank[i] == n - 1) {
      k = 0;
    } else {
      int j = sa[rank[i] + 1];
      while (i + k < n && j + k < n && s[i + k] == s[j + k]) {
        k++;
      }
      lcp[rank[i]] = k;
    }
  }
  return lcp;
}
 
template <typename T>
vector<int> build_lcp(const T &s, const vector<int> &sa) {
  return build_lcp((int) s.size(), s, sa);
}

//..vector<int> sa = suffix_array(s);
//..vector<int> lcp = build_lcp(s, sa);
*/
//..first calc lcp[sa[0]], then lcp[sa[1]] ans so on
vector<int> build_lcp(const T &s, const vector<int> &sa) {
  int n = s.length();
  assert((int) sa.size() == n);
  vector<int> rank(n);
  for (int i = 0; i < n; i++) {
    rank[sa[i]] = i;
  }
  vector<int> lcp(max(n - 1, 0));
  int k = 0;
  for (int i = 0; i < n; i++) {
    if (rank[i] == n - 1) {
      k = 0;
    } else {
      int j = sa[rank[i] + 1];
      while (i + k < n && j + k < n && s[i + k] == s[j + k]) {
        k++;
      }
      lcp[rank[i]] = k;
      if (k > 0) k--;
    }
  }
  return lcp;
}