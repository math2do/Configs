# -*- mode: snippet -*- 
# name: window 
# key: window	
# --

//..using priority_queue
vector<int> slidingWindow(const vector<int> &arr, int k) {
  priority_queue <pair <int, int>> pq;
  int n = arr.size();
  for (int i = 0; i < k; i++) {
    pq.push(make_pair(arr[i], i));
  }
  pair <int, int> pr = pq.top();
  vector <int> ans;
  ans.push_back(pr.first);
  
  for (int i = k; i < n; i++) {
    pq.push(make_pair(arr[i], i));

    while (true) {
      pair <int, int> pr = pq.top();
      if (pr.second <= i - k) {
        pq.pop();
        continue;
      }
      ans.push_back(pr.first);
      break;
    }
  }
  return ans;
}

//..using double-ended queue
vector<int> slidingWindow(const vector<int> &arr, int k) {
  int n = arr.size();
  list <int> dq;
  vector <int> ans;
  for (int i = 0; i < k; i++) {
    while (!dq.empty() && arr[dq.back()] < arr[i]) {
      dq.pop_back();
    }
    dq.push_back(i);
  }
  for (int i = k; i < n; i++) {
    ans.push_back(arr[dq.front()]);
    if (dq.front() <= i - k) dq.pop_front();
    while (!dq.empty() && arr[dq.back()] < arr[i]) {
      dq.pop_back();
    }
    dq.push_back(i);
  }
  ans.push_back(arr[dq.front()]);
  return ans;
}