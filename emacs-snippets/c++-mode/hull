# -*- mode: snippet -*- 
# name: hull 
# key: hull	
# --

vector <point> graham(vector <point> &arr) { 
  int n = arr.size();  
  int ymin = arr[0].y, start = 0; 
  for (int i = 1; i < n; i++) { 
    int y = arr[i].y; 
    if ((y < ymin) || (ymin == y && arr[i].x < arr[start].x)) {
      ymin = arr[i].y;
      start = i; 
    }
  }
  auto swap = [&] (point &p1, point &p2) { 
    point temp = p1; 
    p1 = p2; 
    p2 = temp;
  }; 
  swap(arr[0], arr[start]);
  point p0 = arr[0]; 
  auto comp = [&](const point &p1, const point &p2) { 
    int o = orientation(p0, p1, p2); 
    if (o == S) return euclid(p0, p1) < euclid(p0, p2);
    return o == L;
  };
  sort(arr.begin() + 1, arr.end(), comp); 
  stack<point> st; 
  st.push(arr[0]); 
  st.push(arr[1]); 
  auto prev = [&]() { 
    point p = st.top(); 
    st.pop(); 
    point res = st.top(); 
    st.push(p); 
    return res; 
  };  
  for (int i = 2; i < n; i++) {  
    while (st.size() > 1 && orientation(prev(), st.top(), arr[i]) == R) {
      st.pop(); 
    }
    st.push(arr[i]); 
  } 
  point left_top = st.top();
  ...vector <point> left_wall;
  for (int i = n - 2; i >= 1; i--) {
    if (orientation(p0, left_top, arr[i]) == S) {
      left_wall.push_back(arr[i]);
    } 
  }
  vector <point> ans;
  while (!st.empty()) { 
    point p = st.top(); 
    ans.push_back(p);
    st.pop(); 
  }
  reverse(ans.begin(), ans.end());
  for (point p : left_wall) {
    ans.push_back(p);
  }
  return ans;
  // returns convex hull in antic-clockwise order from starting left-bottom most point
} 