# -*- mode: snippet -*- 
# name: subset 
# key: subset	
# --

//..iterative
template <typename T>
vector <vector <T>> subset(vector <T>& arr) {
  int n = arr.size();
  int total = ((1 << n) - 1);
  vector <vector <T>> ss(total);

  for (int mask = 1; mask <= total; mask++) {
    for (int sh = 0; sh < n; sh++) {
      if ((mask & (1 << sh)) != 0) {
        ss[mask - 1].push_back(arr[sh]);
      } 
    }
  }
  ...ss.push_back(vector <T>());
  return ss;
}

//..recursive
template <typename T>
void subsetUtil(int idx, int n, vector <T> &temp, vector <vector <T>> &ss, vector <T> &arr) {
  if (idx == n) {
    ss.push_back(temp);
    return;
  } 
  //..including  
  temp.push_back(arr[idx]);
  subsetUtil(idx + 1, n, temp, ss, arr);
  temp.pop_back();
  //..excluding
  subsetUtil(idx + 1, n, temp, ss, arr);
} 

template <typename T>
vector <vector <T>> subset(vector <T>& arr) {
  vector <vector <T>> ss;
  int n = arr.size();
  vector <T> temp;
  subsetUtil(0, n, temp, ss, arr);
  ...ss.push_back(vector <T>());
  return ss;
}  