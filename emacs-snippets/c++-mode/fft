# -*- mode: snippet -*- 
# name: fft 
# key: fft	
# --

namespace fft {
  const double PI = acos(-1);
 
  struct num {
    double x, y;
    num(double x = 0, double y = 0) : x(x), y(y) {}

    num operator+(const num& o) const {
      return num(x + o.x, y + o.y);
    }
 
    num operator-(const num& o) const {
      return num(x - o.x, y - o.y);
    }
 
    num operator*(const num& o) const {
      return num(x * o.x - y * o.y, x * o.y + y * o.x);
    }
  };
 
  num conj(num a) {
    return num(a.x, -a.y);
  }
  vector<num> fa, fb, roots = {num(0, 0), num(1, 0)};
  vector<int> rev = {0, 1};
  int base = 1;
 
  void ensure_base(int nbase) {
    if (nbase <= base) {
      return;
    }
    rev.resize(1 << nbase);
    for (int i = 0; i < (1 << nbase); ++i) {
      rev[i] = (rev[i >> 1] >> 1) | ((i & 1) << (nbase - 1));
    }
    roots.resize(1 << nbase);
    while (base < nbase) {
      double angle = 2 * PI / (1 << (base + 1));
      for (int i = 1 << (base - 1); i < (1 << base); ++i) {
        roots[i << 1] = roots[i];
        double ang = angle * ((i << 1) + 1 - (1 << base));
        roots[i << 1 | 1] = num(cos(ang), sin(ang));
      }
      ++base;
    }
  }
 
  void dft(vector<num>& a, int n) {
    int zeros = __builtin_ctz(n);
    ensure_base(zeros);
    int shift = base - zeros;
    for (int i = 0; i < n; ++i) {
      if (i < (rev[i] >> shift)) {
        swap(a[i], a[rev[i] >> shift]);
      }
    }
    for (int i = 1; i < n; i <<= 1) {
      for (int j = 0; j < n; j += i << 1) {
        for (int k = 0; k < i; ++k) {
          num x = a[j + k], y = a[j + k + i] * roots[i + k];
          a[j + k] = x + y;
          a[j + k + i] = x - y;
        }
      }
    }
  }
 
  vector<double> multiply(const vector<double>& a, const vector<double>& b) {
    int need = a.size() + b.size() - 1, nbase = 0;
    while (1 << nbase < need) {
      ++nbase;
    }
    ensure_base(nbase);
    bool equal = a == b;
    int sz = 1 << nbase;
    if (sz > (int) fa.size()) {
      fa.resize(sz);
    }
    if (sz > (int) fb.size()) {
      fb.resize(sz);
    }
    for (int i = 0; i < (int) a.size(); i++) {
      fa[i] = num(a[i], 0);
    }
    for (int i = a.size(); i < sz; ++i) {
      fa[i] = num(0, 0);
    }
    dft(fa, sz);
    if (equal) {
      for (int i = 0; i < sz; ++i) {
        fb[i] = fa[i];
      }
    } else {
      for (int i = 0; i < (int) b.size(); ++i) {
        fb[i] = num(b[i], 0);
      }
      for (int i = (int) b.size(); i < sz; ++i) {
        fb[i] = num(0, 0);
      }
      dft(fb, sz);
    }
    num ratio(1.0 / sz, 0);
    for (int i = 0; i < sz; ++i) {
      fa[i] = fa[i] * fb[i] * ratio;
    }
    reverse(fa.begin() + 1, fa.begin() + sz);
    dft(fa, sz);
    vector<double> c(need);
    for (int i = 0; i < need; ++i) {
      c[i] = fa[i].x;
    }
    return c;
  }
}
 
using fft::multiply;