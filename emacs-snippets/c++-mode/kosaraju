# -*- mode: snippet -*- 
# name: kosaraju 
# key: kosaraju	
# --

template <typename T>
vector<int> kosaraju(const digraph<T> &g, int &cnt) {
  digraph<T> g_rev = g.reverse();
  stack <int> order;
  vector<bool> seen(g.n, false);
  function<void(int)> dfs1 = [&](int v) {
    seen[v] = true;
    for (int id : g.g[v]) {
      auto &e = g.edges[id];
      int to = e.to;
      if (!seen[to]) {
        dfs1(to);
      }
    }
    order.push(v);
  };
  for (int i = 0; i < g.n; i++) {
    if (!seen[i]) {
      dfs1(i);
    }
  }

  vector<int> grp(g.n, -1);
  cnt = 0;
  function<void(int)> dfs2 = [&](int v) {
    grp[v] = cnt;
    for (int id : g_rev.g[v]) {
      auto &e = g_rev.edges[id];
      int to = e.to;
      if (grp[to] == -1) {
        dfs2(to);
      }
    }
  };

  while (!order.empty()) {
    int u = order.top();
    order.pop();
    if (grp[u] != -1) {
      continue;
    }
    dfs2(u);
    cnt++;
  }
  return grp;
  //.. grp[i] <= grp[j] for every edge i -> j
}