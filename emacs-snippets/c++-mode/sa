# -*- mode: snippet -*- 
# name: sa 
# key: sa	
# --

/* tourist's template
template <typename T>
vector<int> suffix_array(int n, const T &s, int char_bound) {
  vector<int> a(n);
  if (n == 0) {
    return a;
  }
  if (char_bound != -1) {
    vector<int> aux(char_bound, 0);
    for (int i = 0; i < n; i++) {
      aux[s[i]]++;
    }
    int sum = 0;
    for (int i = 0; i < char_bound; i++) {
      int add = aux[i];
      aux[i] = sum;
      sum += add;
    }
    for (int i = 0; i < n; i++) {
      a[aux[s[i]]++] = i;
    }
  } else {
    iota(a.begin(), a.end(), 0);
    sort(a.begin(), a.end(), [&s](int i, int j) { return s[i] < s[j]; });
  }
  vector<int> sorted_by_second(n);
  vector<int> ptr_group(n);
  vector<int> new_group(n);
  vector<int> group(n);
  group[a[0]] = 0;
  for (int i = 1; i < n; i++) {
    group[a[i]] = group[a[i - 1]] + (!(s[a[i]] == s[a[i - 1]]));
  }
  int cnt = group[a[n - 1]] + 1;
  int step = 1;
  while (cnt < n) {
    int at = 0;
    for (int i = n - step; i < n; i++) {
      sorted_by_second[at++] = i;
    }
    for (int i = 0; i < n; i++) {
      if (a[i] - step >= 0) {
        sorted_by_second[at++] = a[i] - step;
      }
    }
    for (int i = n - 1; i >= 0; i--) {
      ptr_group[group[a[i]]] = i;
    }
    for (int i = 0; i < n; i++) {
      int x = sorted_by_second[i];
      a[ptr_group[group[x]]++] = x;
    }
    new_group[a[0]] = 0;
    for (int i = 1; i < n; i++) {
      if (group[a[i]] != group[a[i - 1]]) {
        new_group[a[i]] = new_group[a[i - 1]] + 1;
      } else {
        int pre = (a[i - 1] + step >= n ? -1 : group[a[i - 1] + step]);
        int cur = (a[i] + step >= n ? -1 : group[a[i] + step]);
        new_group[a[i]] = new_group[a[i - 1]] + (pre != cur);
      }
    }
    swap(group, new_group);
    cnt = group[a[n - 1]] + 1;
    step <<= 1;
  }
  return a;
}
 
template <typename T>
vector<int> suffix_array(const T &s, int char_bound) {
  return suffix_array((int) s.size(), s, char_bound);
}
//..vector <int> sa = suffix_array(str, 256);
*/

//Mine
namespace suffix {
  int char_bound = 256;
  struct suf { 
    int idx;
    vector <int> rank;
    suf() { rank.resize(2); }
  }; 

  void radix_sort(vector <suf>& sufs, int idx = 1) { 
    int n = sufs.size();
    vector <int> bucket(char_bound + 1, 0);
    vector <suf> temp(n);
    for (int i = 0; i < n; i++) {
      bucket[sufs[i].rank[idx] + 1]++;
    }
    for (int i = 1; i < char_bound; i++) {
      bucket[i] += bucket[i - 1];
    }
    for (int i = n - 1; i >= 0; i--) {
      temp[bucket[sufs[i].rank[idx] + 1] - 1] = sufs[i];
      bucket[sufs[i].rank[idx] + 1]--;
    }
    for (int i = 0; i < n; i++) {
      sufs[i] = temp[i];
    }
    temp.clear();
    if (idx == 0) return;
    else radix_sort(sufs, 0);
  } 

  vector <int> suffix_array(const string &str) {
    int n = str.length();
    vector <suf> sufs(n);
    for (int i = 0; i < n; i++) { 
      sufs[i].idx = i;
      sufs[i].rank[0] = str[i];
      sufs[i].rank[1] = ((i + 1) < n) ? str[i + 1] : -1;
    }
    radix_sort(sufs);
    vector <int> ind(n);
    for (int k = 4; k < 2 * n; k = k * 2) { 
      int rank = 0; 
      int prev_rank = sufs[0].rank[0];
      sufs[0].rank[0] = rank;
      ind[sufs[0].idx] = 0;
      for (int i = 1; i < n; i++) {
        if (sufs[i].rank[0] == prev_rank && sufs[i].rank[1] == sufs[i - 1].rank[1]) { 
          prev_rank = sufs[i].rank[0]; 
          sufs[i].rank[0] = rank; 
        } else {
          prev_rank = sufs[i].rank[0]; 
          sufs[i].rank[0] = ++rank; 
        } 
        ind[sufs[i].idx] = i; 
      } 
      for (int i = 0; i < n; i++) { 
        int next = sufs[i].idx + k / 2; 
        sufs[i].rank[1] = (next < n) ? sufs[ind[next]].rank[0] : -1; 
      } 
      radix_sort(sufs);
    } 
    vector <int> a(n);
    for (int i = 0; i < n; i++) { 
      a[i] = sufs[i].idx; 
    }
    return a; 
  } 
}

using suffix::suffix_array;