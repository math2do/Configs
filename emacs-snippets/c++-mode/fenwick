# -*- mode: snippet -*- 
# name: fenwick 
# key: fenwick	
# --

//..range sum, modify only adds value,
template <typename T>
class fenwick {
 public:
  vector<T> fenw;
  int n;
 
  fenwick(int _n) : n(_n) {
    fenw.resize(n);
  }
 
  void modify(int x, T v) {
    while (x < n) {
      fenw[x] += v;
      x |= (x + 1);
    }
  }
 
  T get(int x) {
    T v{};
    while (x >= 0) {
      v += fenw[x];
      x = (x & (x + 1)) - 1;
    }
    return v;
  }
};

struct node {
  int a = ...; //don't forget to set default value
  inline void operator += (node &other) {
    ...
  } 
};

//..range minimum query [0 - x]
template <typename T>
class fenwick {
  vector<T> fenw;
  int n, v;
 
  fenwick(int n, int v) : n(n), v(v) {
    fenw = vector<int>(n, v);
  }
 
  void modify(int x, int v) {
    while (x < n) {
      fenw[x] = min(fenw[x], v);
      x |= x + 1;
    }
  }
 
  T get(int x) {
    T res = v;
    while (x >= 0) {
      res = min(res, fenw[x]);
      x = (x & (x + 1)) - 1;
    }
    return res;
  }
};
*/

//..[0 - i] range minimum point update Fenwick, lsb(x) = (x & -x)
template <typename T>
class fenwick {
 public:
  vector <T> bit;
  vector <T> arr;
  int init = numeric_limits<T>::max();
  int n;
  fenwick(int _n) : n(_n + 1) { 
    arr = vector <T>(n, init);
    bit = vector <T>(n, init);
  }

  fenwick(vector <int>& nums) : fenwick(nums.size()) {
    int len = nums.size();
    for (int i = 0; i < len; i++) {
      modify(i, nums[i]);
    }                      
  }

  void modify(int i, int val) { 
    int idx = i + 1;
    while (idx < n) {
      bit[idx] = min(bit[idx], val);
      idx = idx + (idx & -idx);
    }
    arr[i] = val;
  }

  T get(int i) {
    T res = init;
    int idx = i + 1;
    while (idx > 0) {
      res = min(res, bit[idx]);
      idx = idx - (idx & -idx);
    }
    return res;
  }
};

//range sum point update Fenwick, lsb(x) = (x & -x)
template <typename T>
class fenwick {
 public:
  vector <T> bit;
  vector <T> arr;
  int init = 0;
  int n;

  fenwick(int _n) : n(_n + 1) {
    arr = vector <T>(n, init);
    bit = vector <T>(n, init);
  }

  fenwick(vector <int> &nums) : fenwick(nums.size()) {
    int len = nums.size();
    for (int i = 0; i < len; i++) {
      modify(i, nums[i]);
    }
  }

  void modify(int i, int val) { 
    int idx = i + 1;
    while (idx < n) {
      bit[idx] += val - arr[i];
      idx = idx + (idx & -idx);
    }
    arr[i] = val;
  }

  T get(int i) {
    T sum = init;
    int idx = i + 1;
    while (idx > 0) {
      sum += bit[idx];
      idx = idx - (idx & -idx);
    }
    return sum;
  }

  int get(int i, int j) { 
    int sumj = get(j);
    int sumi = get(i - 1);
    return sumj - sumi;
  }
};
