# -*- mode: snippet -*- 
# name: sparse 
# key: sparse	
# --

//function must be overlapping friendly e.g min, max, gcd, lcm
template <typename T, class F = function<T(const T&, const T&)>>
class SparseTable {
 public:
  int n;
  vector<vector<T>> mat;
  F func;
 
  SparseTable(const vector<T>& a, const F& f) : func(f) {
    n = static_cast<int>(a.size());
    int max_log = 32 - __builtin_clz(n);
    mat.resize(max_log);
    mat[0] = a;
    for (int i = 1; i < max_log; i++) {
      mat[i].resize(n - (1 << i) + 1);
      for (int j = 0; j <= n - (1 << i); j++) {
        mat[i][j] = func(mat[i - 1][j], mat[i - 1][j + (1 << (i - 1))]);
      }
    }
  }
 
  T get(int from, int to) const {
    assert(0 <= from && from <= to && to <= n - 1);
    int lg = 32 - __builtin_clz(to - from + 1) - 1;
    return func(mat[lg][from], mat[lg][to - (1 << lg) + 1]);
  }
};

...vector <int> arr;
...SparseTable <int> st(arr, [&](const int& a, const int& b) { return min(a, b); });