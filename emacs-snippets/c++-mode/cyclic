# -*- mode: snippet -*- 
# name: cyclic 
# key: cyclic	
# --

template <typename T>
bool cyclic(const digraph <T> &g) {
  enum color { white, gray, black };

  vector <color> col(g.n, white);

  function <bool(int)> dfs = [&](int u) -> bool {
    col[u] = gray;
    for (int id : g.g[u]) {
      int v = g.edges[id].from ^ g.edges[id].to ^ u;
      if (col[v] == white) {
        if (dfs(v)) {
          return true;
        } 
      } else if (col[v] == gray) {
        return true;
      }
    } 
    col[u] = black;
    return false; 
  };
  
  for (int u = 0; u < g.n; u++) {
    if (col[u] == white) {
      if (dfs(u)) {
        return true;
      }
    }
  }
  return false; 
  //returns true if digraph is cyclic, else false
} 
