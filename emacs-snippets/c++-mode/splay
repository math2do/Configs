# -*- mode: snippet -*- 
# name: splay 
# key: splay	
# --

class node {
 public:
  node* l;
  node* r;
  node* p;
  bool rev;
  // declare extra variables:
  int tl;
  int tr;
  int tv;
  int ml;
  int mr;
  int mv;
  int sm;
  int id;
 
  void init(int _tl, int _tr, int _tv, int _id) {
    l = r = p = NULL;
    rev = false;
    // init extra variables:
    tl = _tl;
    tr = _tr;
    tv = _tv;
    ml = tl;
    mr = tr;
    mv = tv;
    sm = tv;
    id = _id;
  }
 
  void unsafe_reverse() {
    rev ^= 1;
    swap(l, r);
    pull();
  }
 
  // apply changes:
  void unsafe_apply() {
  }
 
  void push() {
    if (rev) {
      if (l != NULL) {
        l->unsafe_reverse();
      }
      if (r != NULL) {
        r->unsafe_reverse();
      }
      rev = 0;
    }
    // now push everything else:
  }
 
  void pull() {
    // now init from self:
    ml = tl;
    mr = tr;
    mv = tv;
    sm = tv;
    if (l != NULL) {
      l->p = this;
      // now pull from l:
      ml = min(ml, l->ml);
      mr = max(mr, l->mr);
      mv = max(mv, l->mv);
      sm += l->sm;
    }
    if (r != NULL) {
      r->p = this;
      // now pull from r:
      ml = min(ml, r->ml);
      mr = max(mr, r->mr);
      mv = max(mv, r->mv);
      sm += r->sm;
    }
  }
};

namespace splay_tree {
  bool is_bst_root(node* v) {
    if (v == NULL) {
      return false;
    }
    return (v->p == NULL || (v->p->l != v && v->p->r != v));
  }
   
  void rotate(node* v) {
    node* u = v->p;
    assert(u != NULL);
    u->push();
    v->push();
    v->p = u->p;
    if (v->p != NULL) {
      if (v->p->l == u) {
        v->p->l = v;
      }
      if (v->p->r == u) {
        v->p->r = v;
      }
    }
    if (v == u->l) {
      u->l = v->r;
      v->r = u;
    } else {
      u->r = v->l;
      v->l = u;
    }
    u->pull();
    v->pull();
  }
   
  void splay(node* v) {
    if (v == NULL) {
      return;
    }
    while (!is_bst_root(v)) {
      node* u = v->p;
      if (!is_bst_root(u)) {
        if ((u->l == v) ^ (u->p->l == u)) {
          rotate(v);
        } else {
          rotate(u);
        }
      }
      rotate(v);
    }
  }
   
  pair<node*, int> find(node* v, const function<int(node*)> &go_to) {
    // go_to returns: 0 -- found; -1 -- go left; 1 -- go right
    // find returns the last vertex on the descent and its go_to
    if (v == NULL) {
      return {NULL, 0};
    }
    splay(v);
    int dir;
    while (true) {
      v->push();
      dir = go_to(v);
      if (dir == 0) {
        break;
      }
      node* u = (dir == -1 ? v->l : v->r);
      if (u == NULL) {
        break;
      }
      v = u;
    }
    splay(v);
    return {v, dir};
  }
   
  node* get_leftmost(node* v) {
    return find(v, [&](node*) {
      return -1;
    }).first;
  }
   
  node* get_rightmost(node* v) {
    return find(v, [&](node*) {
      return 1;
    }).first;
  }
   
  node* get_bst_root(node* v) {
    splay(v);
    return v;
  }
   
  pair<node*, node*> split(node* v, const function<bool(node*)> &is_right) {
    if (v == NULL) {
      return {NULL, NULL};
    }
    pair<node*, int> p = find(v, [&](node * u) {
      return is_right(u) ? -1 : 1;
    });
    v = p.first;
    v->push();
    if (p.second == -1) {
      node* u = v->l;
      if (u == NULL) {
        return {NULL, v};
      }
      v->l = NULL;
      u->p = v->p;
      u = get_rightmost(u);
      v->p = u;
      v->pull();
      return {u, v};
    } else {
      node* u = v->r;
      if (u == NULL) {
        return {v, NULL};
      }
      v->r = NULL;
      v->pull();
      return {v, u};
    }
  }
   
  node* merge(node* v, node* u) {
    if (v == NULL) {
      return u;
    }
    if (u == NULL) {
      return v;
    }
    v = get_rightmost(v);
    assert(v->r == NULL);
    splay(u);
    v->push();
    v->r = u;
    v->pull();
    return v;
  }
   
  node* add(node* r, node* v, const function<bool(node*)> &go_left) {
    pair<node*, node*> p = split(r, go_left);
    return merge(p.first, merge(v, p.second));
  }
   
  node* remove(node* v) { // returns the new root
    splay(v);
    v->push();
    node* x = v->l;
    node* y = v->r;
    v->l = v->r = NULL;
    node* z = merge(x, y);
    if (z != NULL) {
      z->p = v->p;
    }
    v->p = NULL;
    v->push();
    v->pull(); // now v might be reusable...
    return z;
  }
   
  node* next(node* v) {
    splay(v);
    v->push();
    if (v->r == NULL) {
      return NULL;
    }
    v = v->r;
    while (v->l != NULL) {
      v->push();
      v = v->l;
    }
    splay(v);
    return v;
  }
   
  node* prev(node* v) {
    splay(v);
    v->push();
    if (v->l == NULL) {
      return NULL;
    }
    v = v->l;
    while (v->r != NULL) {
      v->push();
      v = v->r;
    }
    splay(v);
    return v;
  }
   
  template<typename... T>
  void apply(node* v, T... args) {
    splay(v);
    v->unsafe_apply(args...);
  }
   
  void reverse(node* v) {
    splay(v);
    v->unsafe_reverse();
  }
}
 
using namespace splay_tree;